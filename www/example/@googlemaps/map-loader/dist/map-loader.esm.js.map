{"version":3,"file":"map-loader.esm.js","sources":["../src/map-loader.ts"],"sourcesContent":["/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {Loader, LoaderOptions} from '@googlemaps/js-api-loader';\n\nexport interface MapLoaderOptions {\n  apiKey: string;\n  divId: string;\n  mapOptions: google.maps.MapOptions;\n  apiOptions?: MapsJSAPIOptions;\n  append?: boolean;\n}\n\nexport type MapsJSAPIOptions = Omit<LoaderOptions, 'apiKey'>;\n\nexport class GoogleMap {\n  async initMap(options: MapLoaderOptions): Promise<google.maps.Map<Element>> {\n    await this._loadJSAPI(options);\n    const mapDiv: Element = this._getMapDiv(options);\n    // Initialize the map\n    const map = new google.maps.Map(mapDiv, options.mapOptions);\n    return map;\n  }\n\n  private _getMapDiv(options: MapLoaderOptions): Element {\n    // Get the div to load the map into\n    let mapDiv: Element = document.getElementById(options.divId);\n    if (options.append) {\n      mapDiv = this._appendMapDiv(mapDiv);\n    }\n    return mapDiv;\n  }\n\n  private _appendMapDiv(mapDiv: Element): Element {\n    const appendDivId = 'google_map_appended';\n    const appendDiv: Element = document.createElement('div');\n    appendDiv.setAttribute('id', appendDivId);\n    mapDiv.appendChild(appendDiv);\n    return appendDiv;\n  }\n\n  private async _loadJSAPI(options: MapLoaderOptions): Promise<void> {\n    if (!options.apiOptions) {\n      options.apiOptions = {};\n    }\n    const loaderOptions: LoaderOptions =\n      Object.assign(options.apiOptions, {apiKey: options.apiKey});\n\n    const loader: Loader = new Loader(loaderOptions);\n    // Load the Maps JS API\n    return loader.load();\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;MA2Ba,SAAS;IACd,OAAO,CAAC,OAAyB;;YACrC,MAAM,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;YAC/B,MAAM,MAAM,GAAY,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;;YAEjD,MAAM,GAAG,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC;YAC5D,OAAO,GAAG,CAAC;SACZ;KAAA;IAEO,UAAU,CAAC,OAAyB;;QAE1C,IAAI,MAAM,GAAY,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC7D,IAAI,OAAO,CAAC,MAAM,EAAE;YAClB,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;SACrC;QACD,OAAO,MAAM,CAAC;KACf;IAEO,aAAa,CAAC,MAAe;QACnC,MAAM,WAAW,GAAG,qBAAqB,CAAC;QAC1C,MAAM,SAAS,GAAY,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACzD,SAAS,CAAC,YAAY,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;QAC1C,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QAC9B,OAAO,SAAS,CAAC;KAClB;IAEa,UAAU,CAAC,OAAyB;;YAChD,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE;gBACvB,OAAO,CAAC,UAAU,GAAG,EAAE,CAAC;aACzB;YACD,MAAM,aAAa,GACjB,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,EAAE,EAAC,MAAM,EAAE,OAAO,CAAC,MAAM,EAAC,CAAC,CAAC;YAE9D,MAAM,MAAM,GAAW,IAAI,MAAM,CAAC,aAAa,CAAC,CAAC;;YAEjD,OAAO,MAAM,CAAC,IAAI,EAAE,CAAC;SACtB;KAAA;;;;;"}